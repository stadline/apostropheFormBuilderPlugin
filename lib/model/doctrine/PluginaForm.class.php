<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginaForm extends BaseaForm
{
  protected $fieldCount;
  
  public function getfieldCount()
  {
    $count = 0;
		foreach($this->aFormFieldsets as $aFormFieldset)
		  $count = count($aFormFieldset) + $count;
	  return $count;
  }
  
  public function buildForm()
  {
    return new aFormBuilder(null, array('a_form' => $this));
  }
  
  public function fetchFieldByRank($rank = 1)
  {
    $q = Doctrine::getTable('aFormFieldset')
      ->createQuery('ff')
      ->innerJoin('ff.aForm f WITH f.id = ?', $this->getId())
      ->where('ff.rank = ?', $rank);
    
    return $q->fetchOne();
  }
  
  public function getAllFieldsByRank()
  {
    $q = Doctrine::getTable('aFormFieldset')
      ->createQuery('ff')
      ->innerJoin('ff.aForm f WITH f.id = ?', $this->getId())
      ->orderBy('ff.rank');
    
    return $q->execute();
  }
  
  public function getMaxRank()
  {
    return $this->getTable()->getMaxRank($this->getId());
  }

  public function getSubform($rank = 0, $aFormSubmission = null, $options = array())
  {
    $i = 0;
    $subFieldset = array();
    foreach($this->getAllFieldsByRank() as $aFormFieldset)
    {
      if($aFormFieldset['type'] == 'page_break')
      {
        $i = $i + 1;
      }
      else if($i == $rank)
      {
        $subFieldset[] = $aFormFieldset;
      }
    }

    $form = new aFormBuilder(
      $aFormSubmission,
      array_merge(
        $options,
        array('a_form' => $this, 'a_form_fieldsets' => $subFieldset)
    ));
    
    return $form;
  }

  public function countSubforms()
  {
    $i = 1;
    foreach($this->aFormFieldsets as $aFormFieldset)
    {
      if($aFormFieldset['type'] == 'page_break')
      {
        $i++;
      }
    }
    return $i;
  }

  public function getUserSubmissions($user_id, $q = null, $hydrationMode = null)
  {
    return Doctrine::getTable('aFormSubmission')
      ->getUserSubmissionsQuery($this['id'], $user_id, $q)
      ->execute(array(), $hydrationMode);
  }

}